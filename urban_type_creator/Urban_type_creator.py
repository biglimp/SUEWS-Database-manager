# -*- coding: utf-8 -*-
"""
/***************************************************************************
 Urban_type_creator
                                 A QGIS plugin
 This plugin prepare suews lib data
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2021-05-20
        git sha              : $Format:%H$
        copyright            : (C) 2021 by GU
        email                : oskar.backlin@gu.se
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QFileDialog, QAction, QMessageBox
from qgis.gui import QgsMapLayerComboBox, QgsFieldComboBox, QgsMessageBar
from qgis.core import QgsVectorLayer, QgsMapLayerProxyModel, Qgis, QgsProject, QgsFieldProxyModel, QgsField
# from ..urban_type_edior.urban_type_edior import urban_type_editor
# Initialize Qt resources from file resources.py
from .resources import *
from pathlib import Path
import geopandas as gpd
import webbrowser
import pandas as pd
from timezonefinder import TimezoneFinder as tf

# Import the code for the dialog
from .Urban_type_creator_dialog import Urban_type_creatorDialog
import os.path


class Urban_type_creator:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'Urban_type_creator_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Urban_type_creator')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

        # Declare Variables
        self.outputfile = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('Urban_type_creator', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/Urban_type_creator/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u''),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&Urban_type_creator'),
                action)
            self.iface.removeToolBarIcon(action)


    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = Urban_type_creatorDialog()

       # Use or not ? 
        for i in range(1,14):
            Ls = eval('self.dlg.comboBoxClass' + str(i))
            Ls.clear()
            vars()['self.dlg.comboBoxClass' + str(i)] = Ls

            Rs = eval('self.dlg.comboBoxNew' + str(i))
            Rs.clear()
            vars()['self.dlg.comboBoxNew' + str(i)] = Rs

        self.dlg.comboBoxRegion.clear()
        self.dlg.textEdit.clear()
        
        self.layerComboManagerPoint = QgsMapLayerComboBox(self.dlg.comboBoxVector)
        # self.layerComboManagerPoint.setCurrentIndex(-1)
        # self.layerComboManagerPoint.setFilters(QgsMapLayerProxyModel.PolygonLayer)
        # # self.layerComboManagerPoint.setFixedWidth(300)

        self.layerComboManagerPointField = QgsFieldComboBox(self.dlg.comboBoxField)
        self.layerComboManagerPointField.setFilters(QgsFieldProxyModel.AllTypes)
        # self.layerComboManagerPointField.setFixedWidth(300)
        self.layerComboManagerPoint.layerChanged.connect(self.layerComboManagerPointField.setLayer)

        # tf().timezone_at(lng=x, lat=y)

        # x = vectorlayer.to_crs("EPSG:4326").loc[0:0].representative_point().x.item()
        # y = vectorlayer.to_crs("EPSG:4326").loc[0:0].representative_point().y.item()

        

        # Read Database 
 #       db = pd.read_csv(r'C:\Script\NGEO306\GHSL\UrbanTypes.txt', sep= '\t')
        db_path =r'C:\Script\NGEO306\database_test2.xlsx'
        db = pd.read_excel(db_path, sheet_name= 'Lod1_Types', index_col=  'ID')


        self.dlg.comboBoxRegion.addItems([*set(db['Region'])])
        self.dlg.comboBoxRegion.setCurrentIndex(-1)

        self.dlg.comboBoxType.clear()


        def field_changed(field):
            #get current layer
            layer = self.layerComboManagerPoint.currentLayer()
            # get index of the field
            i = layer.fields().indexOf(field)
            # get unique values
            unique_values = layer.uniqueValues(i)    
            #remove all values from comboBoxAttribute

            len_uv = len(unique_values)

            # Set set to string. ComboBox does not accept other than string ATM
            # Have not yet found a way to fix this. 
            # this loop will do the trick as workaround

            if isinstance(unique_values, str):
                att_list = unique_values
            else:
                att_list = []
                for i in unique_values:
                    att_list.append(str(i))

            for i in range(1,14):
                # Oc == Old Class
                Oc = eval('self.dlg.comboBoxClass' + str(i))
                Oc.clear()
                Oc.setDisabled(True)
                vars()['self.dlg.comboBoxClass' + str(i)] = Oc

                Nc = eval('self.dlg.comboBoxNew' + str(i))
                Nc.clear()
                Nc.setDisabled(True)
                vars()['self.dlg.comboBoxNew' + str(i)] = Nc

                # Te = eval('self.dlg.editClassButton_' + str(i))
                # Te.setDisabled(True)
                # vars()['self.dlg.editClassButton_' + str(i)] = Te

            idx = 1
            for i in range(len_uv):
                if idx > 13:
                    break 
                # Left side
                Oc = eval('self.dlg.comboBoxClass' + str(idx))
                #Oc.setEnabled(True)
                Oc.addItems(att_list)
                Oc.setCurrentIndex(i)
                vars()['self.dlg.comboBoxClass' + str(idx)] = Oc

                Nc = eval('self.dlg.comboBoxNew' + str(idx))
                Nc.setEnabled(True)
                vars()['self.dlg.comboBoxNew' + str(idx)] = Nc

                # Te = eval('self.dlg.editClassButton_' + str(idx))
                # Te.setEnabled(True)
                # vars()['self.dlg.editClassButton_' + str(idx)] = Te

                
                idx += 1    

                self.dlg.comboBoxRegion.setEnabled(True)


        self.layerComboManagerPointField.fieldChanged.connect(field_changed) 

        def region_changed(field):

            # db = pd.read_csv(r'C:\Script\NGEO306\GHSL\UrbanTypes.txt', sep= '\t')

            att_field =  self.layerComboManagerPointField.currentText()

            vlayer = self.layerComboManagerPoint.currentLayer()

        # Read Vectorlayer Path
            try:
                gdf = gpd.read_file(str(vlayer.dataProvider().dataSourceUri()))

                len_uv = len(set(gdf[att_field]))

                reg = self.dlg.comboBoxRegion.currentText()

                
                # for i in range(1,14):

                #     Nc = eval('self.dlg.comboBoxNew' + str(i))
                #     Nc.setDisabled(True)
                #     Nc.clear()
                #     vars()['self.dlg.comboBoxNew' + str(i)] = Nc

                idx = 1
                for i in range(len_uv):
                    if idx > 13:
                        break            

                    Nc = eval('self.dlg.comboBoxNew' + str(idx))
                    Nc.clear()
                    Nc.addItems(db['Type'][db['Region'] == reg])
                    Nc.setCurrentIndex(-1)
                    vars()['self.dlg.comboBoxNew' + str(idx)] = Nc

                    idx += 1 

                self.dlg.comboBoxType.clear()
                self.dlg.comboBoxType.addItems(db['Type'][db['Region'] == reg])
                self.dlg.comboBoxType.setCurrentIndex(-1)
                self.dlg.comboBoxType.setEnabled(True)

            except:
                print("")
                # layer = self.layerComboManagerPoint.currentLayer()
                # # get index of the field
                # i = layer.fields().indexOf(field)
                # # get unique values
                # unique_values = layer.uniqueValues(i)    

                # # remove all values from comboBoxAttribute
                # #self.dlg.comboBoxRegion.addItems(region) 

        self.dlg.comboBoxRegion.currentIndexChanged.connect(region_changed) 

        # Urban Type Editor
        def UTE(self):
            print('UTE')
        #     print('hes')
        #     sg = urban_type_editor(self.iface)
        #     self.dlg.setEnabled(False)
        #     sg.run()
        #     self.dlg.setEnabled(True)


        # Set up of file save dialog
        self.fileDialog = QFileDialog()
        self.dlg.pushButtonSave.clicked.connect(self.savefile)

        # Set up for the Help button
        #self.dlg.helpButton.clicked.connect(self.help)
        self.dlg.helpButton.clicked.connect(UTE)

        
        # Set up for the Help button
        self.dlg.helpButton_2.clicked.connect(self.typeInfo)

        # Set up for the run button
        self.dlg.runButton.clicked.connect(self.start_progress)

        # Show the dialog
        self.dlg.show()

        #run the dialog event loop
        result = self.dlg.exec_()

        # See if OK was pressed
        if result:
            # Do something useful here - delete the line containing pass and
            # substitute with your code.
            pass

    # Info Button
    def typeInfo(self): 
            db_path =r'C:\Script\NGEO306\database_test2.xlsx'

            # db = pd.read_csv(r'C:\Script\NGEO306\GHSL\UrbanTypes.txt', sep= '\t')
            db = pd.read_excel(db_path, sheet_name= 'Lod1_Types', index_col=  'ID')

            reg = self.dlg.comboBoxRegion.currentText()
            urb_type = self.dlg.comboBoxType.currentText() 
            selection = db[db['Region'] == reg][db['Type']== urb_type]

            self.dlg.textEdit.setText(
                'Urban Type Info: '+ urb_type +
                '\n\nRegion: ' +  reg +
                '\n\nPeriod: ' + str(selection['Period'].item()) + 
                '\n\nDescription: ' + str(selection['Description'].item()) +
                '\n\nAuthor: ' + str(selection['Author'].item())
                )

    def savefile(self):
        self.outputfile = self.fileDialog.getSaveFileName(None, "Save File As:", None, "Shapefiles (*.shp)")
        self.dlg.textOutput.setText(self.outputfile[0])

    def help(self):
        url = "https://github.com/gusbacos/UTDB"
        webbrowser.open_new_tab(url)

    def start_progress(self):
        print('in start_progress')

        att_field =  self.layerComboManagerPointField.currentText()

        vlayer = self.layerComboManagerPoint.currentLayer()

        # Read Vectorlayer Path
        gdf = gpd.read_file(str(vlayer.dataProvider().dataSourceUri()))

        dict_reclass = {}

        idx = 1
        for i in range(len(set(gdf[att_field]))):
            if idx > 13:
                break 
            # Left side
            Oc = eval('self.dlg.comboBoxClass' + str(idx))
            oldField = Oc.currentText()
            vars()['self.dlg.comboBoxClass' + str(idx)] = Oc
            
            # Right Side
            Nc = eval('self.dlg.comboBoxNew' + str(idx))
            newField = Nc.currentText()
            vars()['self.dlg.comboBoxNew' + str(idx)] = Nc
            
            dict_reclass[str(oldField)] = str(newField)

            idx += 1

        print(dict_reclass)
     
        # Backup not using GeoPandas ********
        # vlayer_provider=vlayer.dataProvider()
        # vlayer.dataProvider().addAttributes([QgsField('newfield',QVariant.String)])
        # vlayer.updateFields()
        # print (layer.fields().names())
        # #layer = iface.activeLayer()
        # newfieldindex = vlayer.fields().indexFromName('newfield') #The field needs to be created in advance
        # attrmap = {} #dictionary of feature id: {field index: new value}
        # for f in vlayer.getFeatures():
        #     if f[field] in dict_reclass:
        #         attrmap[f.id()] = {newfieldindex:dict_reclass[f[field]]}

        # vlayer.dataProvider().changeAttributeValues(attrmap)

        gdf['New_class'] = gdf[att_field].map(dict_reclass)

        #print(gdf[[att_field,'New_class']].head())
        gdf.to_file(self.outputfile[0])

        vlayer = QgsVectorLayer(self.outputfile[0], Path(self.outputfile[0]).name[:-4])

        QgsProject.instance().addMapLayer(vlayer)


    def resetPlugin(self):
        self.dlg.comboBoxRegion.clear()
        self.dlg.comboBoxVector.clear()
        self.dlg.comboBoxField.clear()
        self.dlg.textEdit.clear()

        for i in range(1,14):
            Ls = eval('self.dlg.comboBoxClass' + str(i))
            Ls.clear()
            vars()['self.dlg.comboBoxClass' + str(i)] = Ls

            Rs = eval('self.dlg.comboBoxNew' + str(i))
            Rs.clear()
            vars()['self.dlg.comboBoxNew' + str(i)] = Rs


    def closeEvent(self, event):
        self.reset_form()
        self.resetPlugin()